datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_DB_URL")
}
 
generator client {
  provider = "prisma-client-js"
}

// Auth models
model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}
 
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
 
  @@map("users")
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verification_tokens")
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

// Application models
enum ApplicationStatus {
  PENDING_APPROVAL
  CHANGE_REQUIRED
  REJECTED
  APPROVED
}

model Foodtruck {
  id            String            @id @default(cuid())
  email         String            @unique
  foodtruckName String            @map("foodtruck_name")
  employees     Int               @default(0)
  cuisineType   String            @map("cuisine_type")
  menuItems     String[]          @map("menu_items")
  lot           String?
  status        ApplicationStatus @default(PENDING_APPROVAL)
  createdAt     DateTime          @default(now()) @map("created_at")
  updatedAt     DateTime          @updatedAt @map("updated_at")

  @@map("foodtrucks")
}

model Artisan {
  id          String            @id @default(cuid())
  email       String            @unique
  businessName String           @map("business_name")
  employees   Int               @default(0)
  type        String            // "Artesane" or "Manualiste"
  product     String
  lot         String?
  status      ApplicationStatus @default(PENDING_APPROVAL)
  createdAt   DateTime          @default(now()) @map("created_at")
  updatedAt   DateTime          @updatedAt @map("updated_at")

  @@map("artisans")
}

model Band {
  id            String            @id @default(cuid())
  email         String            @unique
  name          String
  bio           String            @db.Text
  gender        String            // "cumbia" or "rock"
  discography   Json?             // Array of {name: string, release_date: number}
  support       Int               @default(0) // number of employees
  fee           Int               @default(0)
  rider         String?           // file path or URL
  backline      String?           // file path or URL
  stage         Json?             // Array of stage configurations
  status        ApplicationStatus @default(PENDING_APPROVAL)
  createdAt     DateTime          @default(now()) @map("created_at")
  updatedAt     DateTime          @updatedAt @map("updated_at")

  @@map("bands")
}

model Press {
  id         String            @id @default(cuid())
  email      String            @unique
  mediaName  String            @map("media_name")
  employees  Int               @default(0)
  mediaType  String            @map("media_type") // "Radio", "TV", "Streaming", etc.
  status     ApplicationStatus @default(PENDING_APPROVAL)
  createdAt  DateTime          @default(now()) @map("created_at")
  updatedAt  DateTime          @updatedAt @map("updated_at")

  @@map("press")
} 